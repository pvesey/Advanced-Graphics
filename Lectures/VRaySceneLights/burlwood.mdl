/*****************************************************************************
*     Copyright 1986, 2017 NVIDIA Corporation. All rights reserved.
******************************************************************************

 MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,
 WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR, 
 THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF 
 COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA
 CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING
 ANY GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, 
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF 
 THE USE OR INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN 
 THE MDL MATERIALS.
*/

mdl 1.2;

import anno::*;
import ::base::mono_mode;
import ::base::texture_return;
import ::nvidia::core_definitions::apply_clearcoat;
import ::nvidia::core_definitions::blend;
import ::nvidia::core_definitions::file_texture;
import ::nvidia::core_definitions::flex_material;
import ::nvidia::core_definitions::normalmap_texture;
import ::state::normal;
import ::tex::gamma_mode;

const string COPYRIGHT = 
" Copyright 1986, 2017 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

export material burlwood(
    uniform texture_2d base_color =  texture_2d ( "nvidia/vMaterials/Design/textures/burl_diffuse.png" , ::tex::gamma_default)
    [[
        anno::display_name("Color"),
        anno::description("Attach a tileable texture of wood."),
        anno::in_group("Appearance")
    ]],
     uniform texture_2d reflection_weight =  texture_2d ( "nvidia/vMaterials/Design/textures/burl_spec.png" , ::tex::gamma_default)
    [[
        anno::display_name("Reflection Weight"),
        anno::description("Attach reflection weight map here."),
        anno::in_group("Appearance")
    ]],
     uniform texture_2d bump_texture =  texture_2d ( "nvidia/vMaterials/Design/textures/burl_bump.png" , ::tex::gamma_linear)
    [[
        anno::display_name("Bump"),
        anno::description("Attach bump map here."),
        anno::in_group("Appearance")
    ]],
    uniform float bump_strength =  1.f
    [[
        anno::display_name("Bump Strength"),
        anno::description("Specifies the strength of the bump."),
        anno::in_group("Appearance")
    ]],
     color lacquer_color =  color ( 1.f , 1.f , 1.f)
    [[
        anno::display_name("Lacquer Color"),
        anno::description("Color of the lacquer coating."),
        anno::in_group("Appearance")
    ]],
     float lacquer_reflection_amount =  1.f
    [[
        anno::display_name("Coat Reflection Amount"),
        anno::description("Amount of reflection, higher numbers provide more reflection."),
        anno::in_group("Appearance"),
        anno::hard_range(0, 1)
    ]],
    float lacquer_reflection_roughness =  0.01f
    [[
        anno::display_name("Coat Reflection Roughness"),
        anno::description("Higher roughness values lead to bigger highlights and blurrier reflections of lacquer."),
        anno::in_group("Appearance"),
        anno::hard_range(0, 1)
    ]],
    uniform float2 texture_translate  =  float2 ( 0.f)
    [[
        anno::display_name("Translate"),
        anno::description("Controls the position of the texture."),
        anno::in_group("Transform")
    ]],
    uniform float texture_rotate =  0.f
    [[
        anno::display_name("Rotate"),
        anno::description("Rotates angle of the texture in degrees."),
        anno::in_group("Transform")
    ]],
    uniform float2 texture_scale =  float2 ( 1.f)
    [[
        anno::display_name("Scale"),
        anno::description("Larger numbers increase the texture size."),
        anno::in_group("Transform")
    ]],
    uniform float ior =  1.6f
    [[
        anno::display_name("IOR"),
        anno::description("Index of refraction of the lacquer."),
        anno::soft_range(1.0,4.0),
        anno::in_group("Advanced")
    ]],
    uniform int uv_space_index = 0
    [[
        anno::display_name("UV Space Index"),
        anno::description("UV space index."),
        anno::hard_range(0,3),
        anno::in_group("Advanced")
    ]])
[[
    anno::display_name("Burlwood - Coated"),
    anno::description("Design - Wood - Burlwood - Coated"),
    anno::author("NVIDIA vMaterials"), 
    anno::copyright_notice(COPYRIGHT)
]]= 
::nvidia::core_definitions::apply_clearcoat(
    base:  ::nvidia::core_definitions::blend(
        base:  ::nvidia::core_definitions::flex_material(
            base_color:  ::nvidia::core_definitions::file_texture(
                texture:  base_color,
                mono_source:  ::base::mono_average,
                brightness:  1.f,
                contrast:  1.f,
                scaling:  1.f / texture_scale,
                translation:  texture_translate ,
                rotation:  texture_rotate,
                clip:  false,
                texture_space:  uv_space_index,
                invert:  false).tint,
            diffuse_roughness:  0.f,
            is_metal:  false,
            reflectivity:  0.6f,
            reflection_roughness:  ::nvidia::core_definitions::file_texture(
                texture:  reflection_weight,
                mono_source:  ::base::mono_average,
                brightness:  1.f,
                contrast:  1.f,
                scaling:  1.f / texture_scale,
                translation:  texture_translate ,
                rotation:  texture_rotate,
                clip:  false,
                texture_space:  uv_space_index,
                invert:  false).mono,
            anisotropy:  0.f,
            anisotropy_rotation:  0.f,
            transparency:  0.f,
            transmission_color:  color ( 1.f , 1.f , 1.f),
            volume_color:  color ( 1.f , 1.f , 1.f),
            transmission_roughness:  0.f,
            base_thickness:  0.1f,
            ior:  1.5f,
            thin_walled:  false,
            normal:  ::nvidia::core_definitions::normalmap_texture(
                texture:  bump_texture,
                scaling:  1.f / texture_scale,
                translation:  texture_translate ,
                rotation:  texture_rotate,
                clip:  false,
                factor:  bump_strength,
                texture_space:  uv_space_index)),
        blend:  ::nvidia::core_definitions::flex_material(
            base_color:  ::nvidia::core_definitions::file_texture(
                texture:  base_color,
                mono_source:  ::base::mono_average,
                brightness:  1.f,
                contrast:  1.f,
                scaling:  1.f / texture_scale,
                translation:  texture_translate ,
                rotation:  texture_rotate,
                clip:  false,
                texture_space:  uv_space_index,
                invert:  false).tint,
            diffuse_roughness:  0.f,
            is_metal:  true,
            reflectivity:  ::nvidia::core_definitions::file_texture(
                texture:  reflection_weight,
                mono_source:  ::base::mono_average,
                brightness:  1.f,
                contrast:  1.f,
                scaling:  1.f / texture_scale,
                translation:  texture_translate ,
                rotation:  texture_rotate,
                clip:  false,
                texture_space:  uv_space_index,
                invert:  false).mono,
            reflection_roughness:  0.1f,
            anisotropy:  0.f,
            anisotropy_rotation:  0.f,
            transparency:  0.f,
            transmission_color:  color ( 1.f , 1.f , 1.f),
            volume_color:  color ( 1.f , 1.f , 1.f),
            transmission_roughness:  0.f,
            base_thickness:  0.1f,
            ior:  2.f,
            thin_walled:  false,
            normal:  ::nvidia::core_definitions::normalmap_texture(
                texture:  bump_texture,
                scaling:  1.f / texture_scale,
                translation:  texture_translate ,
                rotation:  texture_rotate,
                clip:  false,
                factor:  bump_strength,
                texture_space:  uv_space_index)),
        weight:  ::nvidia::core_definitions::file_texture(
            texture:  reflection_weight,
            mono_source:  ::base::mono_average,
            brightness:  1.f,
            contrast:  1.f,
            scaling:  1.f / texture_scale,
            translation:  texture_translate ,
            rotation:  texture_rotate,
            clip:  false,
            texture_space:  uv_space_index,
            invert:  false).mono),
    ior:  ior,
    roughness:  lacquer_reflection_roughness,
    visibility:  lacquer_reflection_amount,
    normal:  ::state::normal (),
    coat_filter_color:  lacquer_color);
